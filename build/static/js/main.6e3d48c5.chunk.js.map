{"version":3,"sources":["components/about.js","components/help.js","animations/animatedSwitch.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["About","Help","mapStyles","styles","opacity","transform","scale","bounce","val","spring","stiffness","damping","bounceTransition","atEnter","atLeave","atActive","Home","className","App","to","Button","variant","exact","path","component","rel","href","integrity","crossorigin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAKeA,EAHD,kBACV,+CCEWC,EAJF,WACV,OAAQ,oCCAJ,SAASC,EAAUC,GACtB,MAAO,CACLC,QAASD,EAAOC,QAChBC,UAAU,SAAD,OAAWF,EAAOG,MAAlB,MAKb,SAASC,EAAOC,GACd,OAAOC,YAAOD,EAAK,CACjBE,UAAW,IACXC,QAAS,KAKP,IAAMC,EAAmB,CAE7BC,QAAS,CACPT,QAAS,EACTE,MAAO,KAGTQ,QAAS,CACPV,QAASG,EAAO,GAChBD,MAAOC,EAAO,KAGhBQ,SAAU,CACRX,QAASG,EAAO,GAChBD,MAAOC,EAAO,KClBdS,EAAO,kBACX,kBAAC,IAAD,KACE,yBAAKC,UAAU,aAAf,WAIW,SAASC,IACtB,OACC,kBAAC,IAAD,KACE,2BACE,kBAAC,IAAD,CAAMC,GAAG,UAAS,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAhB,WAEpB,2BACE,kBAAC,IAAD,CAAMF,GAAG,SAAQ,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAhB,UAEnB,2BACE,kBAAC,IAAD,CAAMF,GAAG,KAAT,SAEF,kBAAC,IAAD,CACCN,QAASD,EAAiBC,QAC1BC,QAASF,EAAiBE,QAC1BC,SAAUH,EAAiBG,SAC3Bb,UAAWA,EACXe,UAAU,iBAEV,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,SAASC,UAAWxB,IAChC,kBAAC,IAAD,CAAOuB,KAAK,QAAQC,UAAWvB,M,UC5BtBiB,EARH,kBACV,6BACE,kBAAC,EAAD,MAEA,0BAAMO,IAAI,aAAaC,KAAK,2EAA2EC,UAAU,0EAA0EC,YAAY,gBCGvLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6e3d48c5.chunk.js","sourcesContent":["import React from 'react'\n\nconst About = () => (\n    <a>About Component</a>\n) \nexport default About","import React from 'react'\nconst Help = ()=>{\n   return (<h1>Elo</h1>)\n    \n}\nexport default Help","import { spring } from 'react-router-transition';\n\nexport function mapStyles(styles) {\n    return {\n      opacity: styles.opacity,\n      transform: `scale(${styles.scale})`,\n    };\n  }\n  \n  // wrap the `spring` helper to use a bouncy config\n  function bounce(val) {\n    return spring(val, {\n      stiffness: 300,\n      damping: 22,\n    });\n  }\n  \n  // child matches will...\n export const bounceTransition = {\n    // start in a transparent, upscaled state\n    atEnter: {\n      opacity: 0,\n      scale: 1.2,\n    },\n    // leave in a transparent, downscaled state\n    atLeave: {\n      opacity: bounce(0),\n      scale: bounce(0.8),\n    },\n    // and rest at an opaque, normally-scaled state\n    atActive: {\n      opacity: bounce(1),\n      scale: bounce(1),\n    },\n  };\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\nimport { AnimatedSwitch } from 'react-router-transition';\nimport Button from 'react-bootstrap/Button'\n\nimport About from './about'\nimport Help from './help'\nimport {bounceTransition,mapStyles} from '../animations/animatedSwitch'\nconst Home = ()=>(\n  <Router>\n    <div className=\"display-1\">HOMEa</div>\n  </Router>\n)\n\nexport default function App() {\n  return (\n   <Router>\n     <p>\n       <Link to=\"/about\"><Button variant=\"primary\">About</Button></Link>\n     </p>\n     <p>\n       <Link to=\"/help\"><Button variant=\"warning\">Help</Button></Link>\n     </p>\n     <p>\n       <Link to=\"/\">HOME</Link>\n     </p>\n     <AnimatedSwitch\n      atEnter={bounceTransition.atEnter}\n      atLeave={bounceTransition.atLeave}\n      atActive={bounceTransition.atActive}\n      mapStyles={mapStyles}\n      className=\"route-wrapper\"\n    >\n      <Route exact path=\"/\" component={Home}/>\n      <Route path=\"/about\" component={About}/>\n      <Route path=\"/help\" component={Help}/>\n    </AnimatedSwitch>\n   </Router>\n  );\n}\n\n","import React from 'react';\nimport './App.css';\nimport Header from './components/header'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Router, Switch } from 'react-router-dom';\nconst App = ()=>(\n  <div>\n    <Header/>\n    \n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"/>\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}